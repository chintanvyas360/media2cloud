AWSTemplateFormatVersion: "2010-09-09"

Description: (SO0050-statemachine) Media2Cloud - create Ingest and Metadata state machines and state machine lambda functions.

#
# Mappings to store fixed value of the solution
#
Mappings:
    Solution:
        Package:
            Media2Cloud: "%PACKAGENAME%"
    Function:
        Handler:
            GenerateMediaInfo: index.GenerateMediaInfo
            StartTranscode: index.StartTranscode
            GetTranscodeStatus: index.GetTranscodeStatus
            OnIngestCompleted: index.OnIngestCompleted
            OnIngestError: index.OnIngestError
            CopyObjectForAnalytics: index.CopyObjectForAnalytics
            StartAnalyticsStateMachine: index.StartAnalyticsStateMachine
            GetAnalyticsStateMachine: index.GetAnalyticsStateMachine
            CollectAnalyticsResults: index.CollectAnalyticsResults
            CreateWebVttTracks: index.CreateWebVttTracks
            DispatchEvent: index.DispatchEvent
            OnMetadataError: index.OnMetadataError

Parameters:
    S3Bucket:
        Type: String
        Description: solution bucket
        AllowedPattern: "[a-zA-Z][a-zA-Z0-9-_]*"
    KeyPrefix:
        Type: String
        Description: solution key prefix
    SolutionId:
        Type: String
        Description: solution ID
    RootStackName:
        Type: String
        Description: used to suffix resources
        AllowedPattern: "[a-zA-Z][a-zA-Z0-9-_]*"        
    GlacierBucket:
        Type: String
        Description: this is the ingest bucket specified by customer 
        AllowedPattern: "[a-zA-Z][a-zA-Z0-9-_]*"
    SNSTopic:
        Type: String
        Description: public status to SNS. Third Party should subscribe to receive the notification.
        AllowedPattern: "[a-zA-Z][a-zA-Z0-9-_]*"
    MediaAnalysisBucket:
        Type: String
        Description: created by media-analysis stack
        AllowedPattern: "[a-zA-Z][a-zA-Z0-9-_]*"
    MediaAnalysisStateMachineName:
        Type: String
        Description: created by media-analysis stack
    ElasticsearchDomainName:
        Type: String
        Description: created by media-analysis stack
    WaitIntervalInSec:
        Type: Number
        Description: perically check state status (5 to 600) seconds
        MinValue: 5
        MaxValue: 600
        Default: 10
    IotTopic:
        Type: String
        Description: to publish/receive Iot messages
    ConfigurationTableName:
        Type: String
        Description: dynamodb configuration table name
    ConfigurationPartitionKey:
        Type: String
        Description: dynamodb configuration partition key
    ConfigurationItemName:
        Type: String
        Description: dynamodb configuration item name
    SNSTopicArn:
        Type: String
        Description: topic arn

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            -
                Label:
                    default: "General Configuration"
                Parameters:
                    - S3Bucket
                    - KeyPrefix
                    - SolutionId
                    - RootStackName
            -
                Label:
                    default: "Created by parent stack"
                Parameters:
                    - GlacierBucket
                    - SNSTopic
                    - MediaAnalysisBucket
                    - MediaAnalysisStateMachineName
                    - ElasticsearchDomainName
                    - IotTopic
                    - ConfigurationTableName
                    - ConfigurationPartitionKey
                    - ConfigurationItemName
                    - SNSTopicArn
            -
                Label:
                    default: "State Machine Configuration"
                Parameters:
                    - WaitIntervalInSec

        ParameterLabels:
            S3Bucket:
                default: "Solution Bucket"
            KeyPrefix:
                default: "Solution Key Prefix"
            SolutionId:
                default: "Solution ID"
            RootStackName:
                default: "Top Stack Name"
            GlacierBucket:
                default: "Glacier Bucket"
            SNSTopic:
                default: "SNS Topic"
            MediaAnalysisBucket:
                default: "Media Analysis Bucket"
            MediaAnalysisStateMachineName:
                default: "Media Analysis State Machine"
            ElasticsearchDomainName:
                default: "ES Domain Name"
            WaitIntervalInSec:
                default: "Status Check Interval (in sec)"
            IotTopic:
                default: "Iot Message Topic"
            ConfigurationTableName:
                default: "DynamoDB Table Name"
            ConfigurationPartitionKey:
                default: "DynamoDB Partition Key"
            ConfigurationItemName:
                default: "DynamoDB Item Name"
            SNSTopicArn:
                default: "SNS Topic"

Resources:
    #
    # role for mediaconvert to allow S3 buckets
    #
    MediaConvertRole:
        Type: AWS::IAM::Role
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W11
                        reason: "This wildcard is present as MediaConvert service role needs to be able to access contents within the bucket!"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Action: ["sts:AssumeRole"]
                        Principal:
                            Service: ["mediaconvert.amazonaws.com"]
            Path: /
            Policies:
                -
                    PolicyName: !Sub "${SolutionId}-${RootStackName}-mediaconvert"
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            # Read input object
                            -
                                Effect: "Allow"
                                Action: ["s3:GetObject"]
                                Resource: !Sub "arn:aws:s3:::${GlacierBucket}/*"
                            # Write output object
                            -
                                Effect: "Allow"
                                Action: ["s3:PutObject"]
                                Resource: !Sub "arn:aws:s3:::${MediaAnalysisBucket}/*"

    #
    # IAM service role for state machine to invoke state's lambda
    #
    StateMachineServiceRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                -
                    Effect: "Allow"
                    Action: ["sts:AssumeRole"]
                    Principal:
                        Service: [!Sub "states.${AWS::Region}.amazonaws.com"]
            Path: /
            Policies:
                -
                    PolicyName: !Sub "${SolutionId}-${RootStackName}-statemachine-service-role"
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -
                                Effect: "Allow"
                                Action: ["lambda:InvokeFunction"]
                                Resource:
                                    - !GetAtt GenerateMediaInfoFunction.Arn
                                    - !GetAtt StartTranscodeFunction.Arn
                                    - !GetAtt GetTranscodeStatusFunction.Arn
                                    - !GetAtt OnIngestCompletedFunction.Arn
                                    - !GetAtt OnIngestErrorFunction.Arn
                                    - !GetAtt CopyObjectForAnalyticsFunction.Arn
                                    - !GetAtt StartAnalyticsStateMachineFunction.Arn
                                    - !GetAtt GetAnalyticsStateMachineFunction.Arn
                                    - !GetAtt CollectAnalyticsResultsFunction.Arn
                                    - !GetAtt CreateWebVttTracksFunction.Arn
                                    - !GetAtt DispatchEventFunction.Arn
                                    - !GetAtt OnMetadataErrorFunction.Arn

    #
    # IAM role/policy to grant resource accesses to state machine lambdas
    #
    StateMachineExecutionRole:
        Type: AWS::IAM::Role
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W11
                        reason: "This wildcard is present as state machine lambda needs to be able to access contents within the bucket!"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Action: ["sts:AssumeRole"]
                        Principal:
                            Service: ["lambda.amazonaws.com"]
            Path: /
            Policies:
                -
                    PolicyName: !Sub "${SolutionId}-${RootStackName}-statemachine-execution"
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                        ## S3
                        -
                            Effect: "Allow"
                            Action: [
                                # list objects on media-analysis bucket only
                                "s3:ListBucket"
                            ]
                            Resource: [
                                # !Sub "arn:aws:s3:::${GlacierBucket}",
                                !Sub "arn:aws:s3:::${MediaAnalysisBucket}"
                            ]
                        -
                            Effect: "Allow"
                            Action: [
                                "s3:GetObject",
                                # allow tag glacier tagging so the object transition to Glacier
                                "s3:PutObjectTagging",
                                "s3:PutObjectVersionTagging"
                            ]
                            Resource: [
                                !Sub "arn:aws:s3:::${GlacierBucket}/*",
                            ]
                        -
                            Effect: "Allow"
                            Action: [
                                "s3:GetObject",
                                "s3:PutObject",
                                # allow vtt track to have public_access
                                "s3:PutObjectAcl",
                                "s3:PutObjectVersionAcl"
                            ]
                            Resource: [
                                !Sub "arn:aws:s3:::${MediaAnalysisBucket}/*"
                            ]
                        -
                            Effect: "Allow"
                            Action: [
                                # allow restore on Glacier bucket only
                                "s3:RestoreObject"
                            ]
                            Resource: [
                                !Sub "arn:aws:s3:::${GlacierBucket}/*"
                            ]
                        -
                            Effect: "Allow"
                            Action: [
                                # allow delete object on MediaAnalysis/Proxy bucket only
                                "s3:DeleteObject"
                            ]
                            Resource: [
                                !Sub "arn:aws:s3:::${MediaAnalysisBucket}/*"
                            ]

                        ## Step Functions
                        -
                            Effect: "Allow"
                            Action: [
                                "states:DescribeStateMachine",
                                "states:StartExecution"
                            ]
                            Resource: [
                                !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${MediaAnalysisStateMachineName}"
                            ]
                        -
                            Effect: "Allow"
                            Action: [
                                "states:DescribeExecution",
                                "states:StopExecution"
                            ]
                            Resource: [
                                !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${MediaAnalysisStateMachineName}:*"
                            ]

                        ## MediaConvert
                        -
                            Effect: "Allow"
                            Action: [
                                "mediaConvert:DescribeEndpoints",
                                "mediaConvert:CreateJob",
                                "mediaConvert:GetJob"
                            ]
                            Resource: [
                                !Sub "arn:aws:mediaconvert:${AWS::Region}:${AWS::AccountId}:*"
                            ]
                        -
                            ## MediaConvert requires pass role policy
                            Effect: "Allow"
                            Action: [
                                "iam:GetRole",
                                "iam:PassRole"
                            ]
                            Resource: [
                                !GetAtt MediaConvertRole.Arn
                            ]

                        ## CloudWatch Logs
                        -
                            Effect: "Allow"
                            Action: [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ]
                            Resource: [
                                !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                            ]

                        ## DynamoDB
                        -
                            Effect: "Allow"
                            Action: [
                                "dynamodb:Query",
                                "dynamodb:Attributes",
                                "dynamodb:LeadingKeys",
                                "dynamodb:ReturnConsumedCapacity",
                                "dynamodb:ReturnValues",
                                "dynamodb:Select"
                            ]
                            # state machine lambda should only have read access to Configuration table
                            Resource: [
                                !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SolutionId}-${RootStackName}-Configuration",
                            ]
                        -
                            Effect: "Allow"
                            Action: [
                                "dynamodb:DeleteItem",
                                "dynamodb:Query",
                                "dynamodb:Scan",
                                "dynamodb:UpdateItem",
                                "dynamodb:Attributes",
                                "dynamodb:LeadingKeys",
                                "dynamodb:ReturnConsumedCapacity",
                                "dynamodb:ReturnValues",
                                "dynamodb:Select"
                            ]
                            # state machine lambda does have read/write/delete accesses to Asset and Mediainfo tables
                            Resource: [
                                !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SolutionId}-${RootStackName}-Asset",
                                !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SolutionId}-${RootStackName}-Mediainfo"
                            ]

                        ## API Gateway
                        -
                            Effect: "Allow"
                            Action: ["execute-api:Invoke"]
                            # This wildcard is present because there is a circular dependency between
                            # Step Functions resource and API Gateway resource creation
                            Resource: [!Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/*"]

                        ## IoT
                        -
                            Effect: "Allow"
                            Action: ["iot:Publish"]
                            Resource: [!Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${IotTopic}"]

                        ## SNS
                        -
                            Effect: "Allow"
                            Action: ["sns:Publish"]
                            Resource: [!Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SNSTopic}"]



    #
    # (Ingest State machine) lambda function to generate media info of the ingest asset
    #
    GenerateMediaInfoFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub "${SolutionId}-${RootStackName}-GenerateMediaInfo"
            Description: !Sub "(${SolutionId}) Generate mediainfo from the ingested assets"
            Runtime: nodejs8.10
            MemorySize: "128"
            Timeout: "300"
            Handler: !FindInMap ["Function", "Handler", "GenerateMediaInfo"]
            Role: !GetAtt StateMachineExecutionRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub ["${KeyPrefix}/${x0}", {x0: !FindInMap ["Solution", "Package", "Media2Cloud"]}]
            Environment:
                Variables:
                    ENV_CONFIGURATION_TALBE: !Ref ConfigurationTableName
                    ENV_CONFIGURATION_PARTITION_KEY: !Ref ConfigurationPartitionKey
                    ENV_CONFIGURATION_ITEM_NAME: !Ref ConfigurationItemName
                    ENV_SNS_TOPIC_ARN: !Ref SNSTopicArn

    #
    # (Ingest State machine) lambda function to start transcode through MediaConvert
    #
    StartTranscodeFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub "${SolutionId}-${RootStackName}-StartTranscode"
            Description: !Sub "(${SolutionId}) Start MediaConvert job to create a proxy"
            Runtime: nodejs8.10
            MemorySize: "128"
            Timeout: "300"
            Handler: !FindInMap ["Function", "Handler", "StartTranscode"]
            Role: !GetAtt StateMachineExecutionRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub ["${KeyPrefix}/${x0}", {x0: !FindInMap ["Solution", "Package", "Media2Cloud"]}]
            Environment:
                Variables:
                    ENV_CONFIGURATION_TALBE: !Ref ConfigurationTableName
                    ENV_CONFIGURATION_PARTITION_KEY: !Ref ConfigurationPartitionKey
                    ENV_CONFIGURATION_ITEM_NAME: !Ref ConfigurationItemName
                    ENV_SNS_TOPIC_ARN: !Ref SNSTopicArn

    #
    # (Ingest State machine) lambda function to monitor MediaConvert job status
    #
    GetTranscodeStatusFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub "${SolutionId}-${RootStackName}-GetTranscodeStatus"
            Description: !Sub "(${SolutionId}) Monitor MediaConvert job status"
            Runtime: nodejs8.10
            MemorySize: "128"
            Timeout: "300"
            Handler: !FindInMap ["Function", "Handler", "GetTranscodeStatus"]
            Role: !GetAtt StateMachineExecutionRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub ["${KeyPrefix}/${x0}", {x0: !FindInMap ["Solution", "Package", "Media2Cloud"]}]
            Environment:
                Variables:
                    ENV_CONFIGURATION_TALBE: !Ref ConfigurationTableName
                    ENV_CONFIGURATION_PARTITION_KEY: !Ref ConfigurationPartitionKey
                    ENV_CONFIGURATION_ITEM_NAME: !Ref ConfigurationItemName
                    ENV_SNS_TOPIC_ARN: !Ref SNSTopicArn

    #
    # (Ingest State machine) lambda function to send SNS notification onCompleted
    #
    OnIngestCompletedFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub "${SolutionId}-${RootStackName}-OnIngestCompleted"
            Description: !Sub "(${SolutionId}) Send SNS notification when ingest is completed"
            Runtime: nodejs8.10
            MemorySize: "128"
            Timeout: "300"
            Handler: !FindInMap ["Function", "Handler", "OnIngestCompleted"]
            Role: !GetAtt StateMachineExecutionRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub ["${KeyPrefix}/${x0}", {x0: !FindInMap ["Solution", "Package", "Media2Cloud"]}]
            Environment:
                Variables:
                    ENV_CONFIGURATION_TALBE: !Ref ConfigurationTableName
                    ENV_CONFIGURATION_PARTITION_KEY: !Ref ConfigurationPartitionKey
                    ENV_CONFIGURATION_ITEM_NAME: !Ref ConfigurationItemName
                    ENV_SNS_TOPIC_ARN: !Ref SNSTopicArn

    #
    # (Ingest State machine) lambda function to send SNS notification onError
    #
    OnIngestErrorFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub "${SolutionId}-${RootStackName}-OnIngestError"
            Description: !Sub "(${SolutionId}) Send SNS notification when error occurs during ingest"
            Runtime: nodejs8.10
            MemorySize: "128"
            Timeout: "300"
            Handler: !FindInMap ["Function", "Handler", "OnIngestError"]
            Role: !GetAtt StateMachineExecutionRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub ["${KeyPrefix}/${x0}", {x0: !FindInMap ["Solution", "Package", "Media2Cloud"]}]
            Environment:
                Variables:
                    ENV_CONFIGURATION_TALBE: !Ref ConfigurationTableName
                    ENV_CONFIGURATION_PARTITION_KEY: !Ref ConfigurationPartitionKey
                    ENV_CONFIGURATION_ITEM_NAME: !Ref ConfigurationItemName
                    ENV_SNS_TOPIC_ARN: !Ref SNSTopicArn

    #
    # (Metadata State machine) lambda function to copy object to media analysis bucket
    #
    CopyObjectForAnalyticsFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub "${SolutionId}-${RootStackName}-CopyObjectForAnalytics"
            Description: !Sub "(${SolutionId}) SHOULD BE REMOVED. Copy proxy to media analysis bucket"
            Runtime: nodejs8.10
            MemorySize: "1024"
            Timeout: "900"
            Handler: !FindInMap ["Function", "Handler", "CopyObjectForAnalytics"]
            Role: !GetAtt StateMachineExecutionRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub ["${KeyPrefix}/${x0}", {x0: !FindInMap ["Solution", "Package", "Media2Cloud"]}]
            Environment:
                Variables:
                    ENV_CONFIGURATION_TALBE: !Ref ConfigurationTableName
                    ENV_CONFIGURATION_PARTITION_KEY: !Ref ConfigurationPartitionKey
                    ENV_CONFIGURATION_ITEM_NAME: !Ref ConfigurationItemName
                    ENV_SNS_TOPIC_ARN: !Ref SNSTopicArn

    #
    # (Metadata State machine) lambda function to start media analysis state machine
    #
    StartAnalyticsStateMachineFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub "${SolutionId}-${RootStackName}-StartAnalyticsStateMachine"
            Description: !Sub "(${SolutionId}) Start media analysis state machine"
            Runtime: nodejs8.10
            MemorySize: "128"
            Timeout: "300"
            Handler: !FindInMap ["Function", "Handler", "StartAnalyticsStateMachine"]
            Role: !GetAtt StateMachineExecutionRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub ["${KeyPrefix}/${x0}", {x0: !FindInMap ["Solution", "Package", "Media2Cloud"]}]
            Environment:
                Variables:
                    ENV_CONFIGURATION_TALBE: !Ref ConfigurationTableName
                    ENV_CONFIGURATION_PARTITION_KEY: !Ref ConfigurationPartitionKey
                    ENV_CONFIGURATION_ITEM_NAME: !Ref ConfigurationItemName
                    ENV_SNS_TOPIC_ARN: !Ref SNSTopicArn

    #
    # (Metadata State machine) lambda function to monitor media analysis state machine
    #
    GetAnalyticsStateMachineFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub "${SolutionId}-${RootStackName}-GetAnalyticsStateMachine"
            Description: !Sub "(${SolutionId}) Monitor media analysis state machine status"
            Runtime: nodejs8.10
            MemorySize: "128"
            Timeout: "300"
            Handler: !FindInMap ["Function", "Handler", "GetAnalyticsStateMachine"]
            Role: !GetAtt StateMachineExecutionRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub ["${KeyPrefix}/${x0}", {x0: !FindInMap ["Solution", "Package", "Media2Cloud"]}]
            Environment:
                Variables:
                    ENV_CONFIGURATION_TALBE: !Ref ConfigurationTableName
                    ENV_CONFIGURATION_PARTITION_KEY: !Ref ConfigurationPartitionKey
                    ENV_CONFIGURATION_ITEM_NAME: !Ref ConfigurationItemName
                    ENV_SNS_TOPIC_ARN: !Ref SNSTopicArn

    #
    # (Metadata State machine) lambda function to collect all AI/ML metadata from media analysis state machine
    #
    CollectAnalyticsResultsFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub "${SolutionId}-${RootStackName}-CollectAnalyticsResults"
            Description: !Sub "(${SolutionId}) Collect all AI/ML metadata from media analysis state machine"
            Runtime: nodejs8.10
            MemorySize: "128"
            Timeout: "300"
            Handler: !FindInMap ["Function", "Handler", "CollectAnalyticsResults"]
            Role: !GetAtt StateMachineExecutionRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub ["${KeyPrefix}/${x0}", {x0: !FindInMap ["Solution", "Package", "Media2Cloud"]}]
            Environment:
                Variables:
                    ENV_CONFIGURATION_TALBE: !Ref ConfigurationTableName
                    ENV_CONFIGURATION_PARTITION_KEY: !Ref ConfigurationPartitionKey
                    ENV_CONFIGURATION_ITEM_NAME: !Ref ConfigurationItemName
                    ENV_SNS_TOPIC_ARN: !Ref SNSTopicArn

    #
    # (Metadata State machine) lambda function to create webvtt tracks
    #
    CreateWebVttTracksFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub "${SolutionId}-${RootStackName}-CreateWebVttTracks"
            Description: !Sub "(${SolutionId}) Create webvtt tracks recursively for all AI/ML metadata"
            Runtime: nodejs8.10
            MemorySize: "1024"
            Timeout: "900"
            Handler: !FindInMap ["Function", "Handler", "CreateWebVttTracks"]
            Role: !GetAtt StateMachineExecutionRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub ["${KeyPrefix}/${x0}", {x0: !FindInMap ["Solution", "Package", "Media2Cloud"]}]
            Environment:
                Variables:
                    ENV_CONFIGURATION_TALBE: !Ref ConfigurationTableName
                    ENV_CONFIGURATION_PARTITION_KEY: !Ref ConfigurationPartitionKey
                    ENV_CONFIGURATION_ITEM_NAME: !Ref ConfigurationItemName
                    ENV_SNS_TOPIC_ARN: !Ref SNSTopicArn

    #
    # (Metadata State machine) lambda function to consolidate AI/ML metadata and dispatch notification to SNS
    #
    DispatchEventFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub "${SolutionId}-${RootStackName}-DispatchEvent"
            Description: !Sub "(${SolutionId}) Polish AI/ML metadata and publish message to SNS topic"
            Runtime: nodejs8.10
            MemorySize: "1024"
            Timeout: "900"
            Handler: !FindInMap ["Function", "Handler", "DispatchEvent"]
            Role: !GetAtt StateMachineExecutionRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub ["${KeyPrefix}/${x0}", {x0: !FindInMap ["Solution", "Package", "Media2Cloud"]}]
            Environment:
                Variables:
                    ENV_CONFIGURATION_TALBE: !Ref ConfigurationTableName
                    ENV_CONFIGURATION_PARTITION_KEY: !Ref ConfigurationPartitionKey
                    ENV_CONFIGURATION_ITEM_NAME: !Ref ConfigurationItemName
                    ENV_SNS_TOPIC_ARN: !Ref SNSTopicArn

    #
    # (Metadata State machine) lambda function to handle onError event
    #
    OnMetadataErrorFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub "${SolutionId}-${RootStackName}-OnMetadataError"
            Description: !Sub "(${SolutionId}) Send SNS notification when error occurs during metadata generation"
            Runtime: nodejs8.10
            MemorySize: "128"
            Timeout: "300"
            Handler: !FindInMap ["Function", "Handler", "OnMetadataError"]
            Role: !GetAtt StateMachineExecutionRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub ["${KeyPrefix}/${x0}", {x0: !FindInMap ["Solution", "Package", "Media2Cloud"]}]
            Environment:
                Variables:
                    ENV_CONFIGURATION_TALBE: !Ref ConfigurationTableName
                    ENV_CONFIGURATION_PARTITION_KEY: !Ref ConfigurationPartitionKey
                    ENV_CONFIGURATION_ITEM_NAME: !Ref ConfigurationItemName
                    ENV_SNS_TOPIC_ARN: !Ref SNSTopicArn

    #
    # Ingest State Machine
    #
    IngestStateMachine:
        Type: AWS::StepFunctions::StateMachine
        Properties:
            StateMachineName: !Sub "${SolutionId}-${RootStackName}-ingest-statemachine"
            RoleArn: !GetAtt StateMachineServiceRole.Arn
            DefinitionString:
                !Sub
                    - |-
                        {
                            "Comment": "Ingest statemahince to generate mediainfo and proxy version of the media",
                            "StartAt": "GenerateMediainfo",
                            "States": {
                                "GenerateMediainfo": {
                                    "Type": "Task",
                                    "Resource": "${x0}",
                                    "Next": "StartTranscode",
                                    "Catch": [{
                                        "ErrorEquals": [ "MediainfoError" ],
                                        "Next": "MediainfoError"
                                    }]
                                },
                                "MediainfoError": {
                                    "Type": "Task",
                                    "Resource": "${x4}",
                                    "Next": "Fail"
                                },
                                "StartTranscode": {
                                    "Type": "Task",
                                    "Resource": "${x1}",
                                    "Next": "WaitTranscodeStatus",
                                    "Catch": [{
                                        "ErrorEquals": [ "TranscodeError" ],
                                        "Next": "TranscodeError"
                                    }]
                                },
                                "WaitTranscodeStatus": {
                                    "Type": "Wait",
                                    "Seconds": ${WaitIntervalInSec},
                                    "Next": "GetTranscodeStatus"
                                },
                                "GetTranscodeStatus": {
                                    "Type": "Task",
                                    "Resource": "${x2}",
                                    "Next": "IsTranscodeCompleted",
                                    "Catch": [{
                                        "ErrorEquals": [ "TranscodeError" ],
                                        "Next": "TranscodeError"
                                    }]
                                },
                                "IsTranscodeCompleted": {
                                    "Type": "Choice",
                                    "Choices": [{
                                        "Variable": "$.Status",
                                        "StringEquals": "COMPLETED",
                                        "Next": "OnIngestCompleted"
                                    }],
                                    "Default": "WaitTranscodeStatus"
                                },
                                "TranscodeError": {
                                    "Type": "Task",
                                    "Resource": "${x4}",
                                    "Next": "Fail"
                                },
                                "OnIngestCompleted": {
                                    "Type": "Task",
                                    "Resource": "${x3}",
                                    "Catch": [{
                                        "ErrorEquals": [ "IngestError" ],
                                        "Next": "IngestError"
                                    }],
                                    "End": true
                                },
                                "IngestError": {
                                    "Type": "Task",
                                    "Resource": "${x4}",
                                    "Next": "Fail"
                                },
                                "Fail": {
                                    "Type": "Fail"
                                }
                            }
                        }
                    -
                        {
                            x0: !GetAtt GenerateMediaInfoFunction.Arn,
                            x1: !GetAtt StartTranscodeFunction.Arn,
                            x2: !GetAtt GetTranscodeStatusFunction.Arn,
                            x3: !GetAtt OnIngestCompletedFunction.Arn,
                            x4: !GetAtt OnIngestErrorFunction.Arn,
                        }

    MetadataStateMachine:
        Type: AWS::StepFunctions::StateMachine
        Properties:
            StateMachineName: !Sub "${SolutionId}-${RootStackName}-metadata-statemachine"
            RoleArn: !GetAtt StateMachineServiceRole.Arn
            DefinitionString:
                !Sub
                    - |-
                        {
                            "Comment": "AnalyticsStateMachine launches media-analytics-solution state machine",
                            "StartAt": "CopyObjectForAnalytics",
                            "States": {
                                "CopyObjectForAnalytics": {
                                    "Type": "Task",
                                    "Resource": "${x0}",
                                    "Next": "StartAnalyticsStateMachine"
                                },
                                "StartAnalyticsStateMachine": {
                                    "Type": "Task",
                                    "Resource": "${x1}",
                                    "Next": "WaitAnalyticsStateMachine",
                                    "Catch": [{
                                        "ErrorEquals": [ "AnalyticsError" ],
                                        "Next": "AnalyticsError"
                                    }]
                                },
                                "WaitAnalyticsStateMachine": {
                                    "Type": "Wait",
                                    "Seconds": ${WaitIntervalInSec},
                                    "Next": "GetAnalyticsStateMachine"
                                },
                                "GetAnalyticsStateMachine": {
                                    "Type": "Task",
                                    "Resource": "${x2}",
                                    "Next": "IsAnalyticsStateMachineCompleted",
                                    "Catch": [{
                                        "ErrorEquals": [ "AnalyticsError" ],
                                        "Next": "AnalyticsError"
                                    }]
                                },
                                "IsAnalyticsStateMachineCompleted": {
                                    "Type": "Choice",
                                    "Choices": [{
                                        "Variable": "$.Status",
                                        "StringEquals": "COMPLETED",
                                        "Next": "CollectAnalyticsResults"
                                    }],
                                    "Default": "WaitAnalyticsStateMachine"
                                },
                                "CollectAnalyticsResults": {
                                    "Type": "Task",
                                    "Resource": "${x3}",
                                    "Next": "CreateWebVttTracks"
                                },
                                "CreateWebVttTracks": {
                                    "Type": "Task",
                                    "Resource": "${x4}",
                                    "Next": "IsCreateWebVttTracksCompleted",
                                    "Catch": [{
                                        "ErrorEquals": [ "WebVttError" ],
                                        "Next": "WebVttError"
                                    }]
                                },
                                "IsCreateWebVttTracksCompleted": {
                                    "Type": "Choice",
                                    "Choices": [{
                                        "Variable": "$.Status",
                                        "StringEquals": "COMPLETED",
                                        "Next": "DispatchMessage"
                                    }],
                                    "Default": "CreateWebVttTracks"
                                },
                                "DispatchMessage": {
                                    "Type": "Task",
                                    "Resource": "${x5}",
                                    "End": true
                                },
                                "AnalyticsError": {
                                    "Type": "Task",
                                    "Resource": "${x6}",
                                    "Next": "Fail"
                                },
                                "WebVttError": {
                                    "Type": "Task",
                                    "Resource": "${x6}",
                                    "Next": "Fail"
                                },
                                "Fail": {
                                "Type": "Fail"
                                }
                            }
                        }
                    -
                        {
                            x0: !GetAtt CopyObjectForAnalyticsFunction.Arn,
                            x1: !GetAtt StartAnalyticsStateMachineFunction.Arn,
                            x2: !GetAtt GetAnalyticsStateMachineFunction.Arn,
                            x3: !GetAtt CollectAnalyticsResultsFunction.Arn,
                            x4: !GetAtt CreateWebVttTracksFunction.Arn,
                            x5: !GetAtt DispatchEventFunction.Arn,
                            x6: !GetAtt OnMetadataErrorFunction.Arn
                        }

Outputs:
    MediaConvertRoleArn:
        Value: !GetAtt MediaConvertRole.Arn
        Description: Role Arn (State Machine Execution)

    ExecutionRoleArn:
        Value: !GetAtt StateMachineExecutionRole.Arn
        Description: Role Arn (State Machine Execution)

    ServiceRoleArn:
        Value: !GetAtt StateMachineServiceRole.Arn
        Description: Role Arn (State Machine Service)

    GenerateMediaInfoArn:
        Value: !GetAtt GenerateMediaInfoFunction.Arn
        Description: Lambda Arn (Ingest.GenerateMediaInfo)

    StartTranscodeArn:
        Value: !GetAtt StartTranscodeFunction.Arn
        Description: Lambda Arn (Ingest.StartTranscode)

    GetTranscodeStatusArn:
        Value: !GetAtt GetTranscodeStatusFunction.Arn
        Description: Lambda Arn (Ingest.GetTranscodeStatus)

    OnIngestCompletedArn:
        Value: !GetAtt OnIngestCompletedFunction.Arn
        Description: Lambda Arn (Ingest.OnIngestCompleted)

    OnIngestErrorArn:
        Value: !GetAtt OnIngestErrorFunction.Arn
        Description: Lambda Arn (Ingest.OnIngestError)

    CopyObjectForAnalyticsArn:
        Value: !GetAtt CopyObjectForAnalyticsFunction.Arn
        Description: Lambda Arn (Metadata.CopyObjectForAnalytics)

    StartAnalyticsStateMachineArn:
        Value: !GetAtt StartAnalyticsStateMachineFunction.Arn
        Description: Lambda Arn (Metadata.StartAnalyticsStateMachine)

    GetAnalyticsStateMachineArn:
        Value: !GetAtt GetAnalyticsStateMachineFunction.Arn
        Description: Lambda Arn (Metadata.GetAnalyticsStateMachine)

    CollectAnalyticsResultsArn:
        Value: !GetAtt CollectAnalyticsResultsFunction.Arn
        Description: Lambda Arn (Metadata.CollectAnalyticsResults)

    CreateWebVttTracksArn:
        Value: !GetAtt CreateWebVttTracksFunction.Arn
        Description: Lambda Arn (Metadata.CreateWebVttTracks)

    DispatchEventArn:
        Value: !GetAtt DispatchEventFunction.Arn
        Description: Lambda Arn (Metadata.DispatchEvent)

    OnMetadataErrorArn:
        Value: !GetAtt OnMetadataErrorFunction.Arn
        Description: Lambda Arn (Metadata.OnMetadataError)

    IngestStateMachineArn:
        Value: !Ref IngestStateMachine
        Description: State Machine Arn (Ingest)

    IngestStateMachineName:
        Value: !GetAtt IngestStateMachine.Name
        Description: State Machine Name (Ingest)

    MetadataStateMachineArn:
        Value: !Ref MetadataStateMachine
        Description: State Machine Arn (Metadata)

    MetadataStateMachineName:
        Value: !GetAtt MetadataStateMachine.Name
        Description: State Machine Name (Metadata)

    LambdaFunctionList:
        Value: !Join [ ",", [
            !Ref GenerateMediaInfoFunction,
            !Ref StartTranscodeFunction,
            !Ref GetTranscodeStatusFunction,
            !Ref OnIngestCompletedFunction,
            !Ref CopyObjectForAnalyticsFunction,
            !Ref StartAnalyticsStateMachineFunction,
            !Ref GetAnalyticsStateMachineFunction,
            !Ref CollectAnalyticsResultsFunction,
            !Ref CreateWebVttTracksFunction,
            !Ref DispatchEventFunction,
            !Ref OnIngestErrorFunction,
            !Ref OnMetadataErrorFunction
        ]]
        Description: List of Lambda functions (State Machine)
