AWSTemplateFormatVersion: "2010-09-09"

Description: (SO0050-bucket) Media2Cloud - create and configure ingest, proxy, and web buckets

#
# Mappings to store fixed value of the solution
#
Mappings:
    Solution:
        Package:
            S3Event: "%PKG_S3EVENT%"
    Function:
        Handler:
            OnObjectCreated: index.onS3Event
    S3:
        Notification:
            Prefix: ""
            Suffixes: ".json,.mp4,.mov,.wmv,.mxf,.ts,.mpg,.mpeg"
        Lifecycle:
            TageName: "IngestCompleted"
            TagValue: "true"
            StorageClass: "GLACIER"
        Website:
            MainPage: "demo.html"
    #
    # UserDefined allows you to customize the solution to specify your own buckets to use for ingest and proxy
    # * Change Ingest to your own ingest bucket name
    # * Change Proxy to your own proxy bucket name
    UserDefined:
        Bucket:
            Ingest: ""
            Proxy: ""

Parameters:
    SolutionId:
        Type: String
        Description: "part of the resource naming"
    RootStackName:
        Type: String
        Description: "part of the resource naming"
    SolutionUuid:
        Type: String
        Description: unique solution uuid
    AnonymousUsage:
        Type: String
        Description: send ananymous usage data
        Default: "No"
        AllowedValues:
          - "No"
          - "Yes"
    S3Bucket:
        Type: String
        Description: solution bucket
        AllowedPattern: "[a-z][a-z0-9-_]*"
    KeyPrefix:
        Type: String
        Description: solution key prefix
    CustomResourceArn:
        Type: String
        Description: for post-processing
    BucketPrefix:
        Type: String
        Description: "bucket prefix"
        AllowedPattern: "[a-z][a-z0-9-_]*"
    SNSTopicArn:
        Type: String
        Description: topic arn
    IotHost:
        Type: String
        Description: Iot host
    IotTopic:
        Type: String
        Description: Iot topic
    AwsSdkLayer:
        Type: String
        Description: AWS SDK layer
    CoreLibLayer:
        Type: String
        Description: Core Library layer

Metadata:
  cfn-lint:
    config:
        ignore_checks:
            # ignore CustomResourceArn not used
            - W2001
    AWS::CloudFormation::Interface:
        ParameterGroups:
            -
                Label:
                    default: "Solution Configuration"
                Parameters:
                    - SolutionId
                    - RootStackName
                    - SolutionUuid
                    - AnonymousUsage
                    - S3Bucket
                    - KeyPrefix
            -
                Label:
                    default: "S3 Configuration"
                Parameters:
                    - BucketPrefix
            -
                Label:
                    default: "Other resources"
                Parameters:
                    - CustomResourceArn
                    - IotTopic
                    - SNSTopicArn
                    - IotHost
                    - IotTopic
                    - AwsSdkLayer
                    - CoreLibLayer
        ParameterLabels:
            BucketPrefix:
                default: "Bucket Prefix"
            CustomResourceArn:
                default: "Custom Resource Arn"
            SolutionId:
                default: "Solution Id"
            RootStackName:
                default: "Top Stack Name"
            SolutionUuid:
                default: "UUID"
            AnonymousUsage:
                default: "Anonymous usage"
            S3Bucket:
                default: "Solution Bucket"
            KeyPrefix:
                default: "Solution KeyPrefix"
            SNSTopicArn:
                default: "SNS Topic"
            IotHost:
                default: "IoT Host"
            IotTopic:
                default: "IoT Topic"
            AwsSdkLayer:
                default: "AWS SDK Layer"
            CoreLibLayer:
                default: "Core Library Layer"

Conditions:
    CreateIngestBucket: !Equals [
        !FindInMap [
            "UserDefined",
            "Bucket",
            "Ingest"
        ],
        ""
    ]
    CreateProxyBucket: !Equals [
        !FindInMap [
            "UserDefined",
            "Bucket",
            "Proxy"
        ],
        ""
    ]

Resources:
    #
    # assets automatically transition to Glacier after X days
    #
    IngestBucket:
        Condition: CreateIngestBucket
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        Properties:
            BucketName: !Sub "${BucketPrefix}-ingest"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                    -
                      ServerSideEncryptionByDefault:
                          SSEAlgorithm: AES256
            AccessControl: LogDeliveryWrite
            LoggingConfiguration:
              DestinationBucketName: !Sub "${BucketPrefix}-ingest"
              LogFilePrefix: "access_log/"
            CorsConfiguration:
                CorsRules:
                    -
                        AllowedMethods:
                            - "GET"
                            - "PUT"
                            - "POST"
                            - "HEAD"
                        AllowedOrigins:
                            - "*"
                        AllowedHeaders:
                            - "*"
                        ExposedHeaders:
                            - "ETag"
                            - "Content-Length"
                            - "x-amz-meta-uuid"
                            - "x-amz-meta-md5"
                        MaxAge: 3000
            LifecycleConfiguration:
                Rules:
                    -
                        Id: "Keep access log for 30 days"
                        Status: Enabled
                        Prefix: access_log/
                        ExpirationInDays: 30
                        AbortIncompleteMultipartUpload:
                            DaysAfterInitiation: 1
                    -
                        Id: "Move to glacier after ingest completes"
                        Status: Enabled
                        TagFilters:
                            -
                                Key: !FindInMap [
                                    "S3",
                                    "Lifecycle",
                                    "TageName"
                                ]
                                Value: !FindInMap [
                                    "S3",
                                    "Lifecycle",
                                    "TagValue"
                                ]
                        Transitions:
                            -
                                StorageClass: !FindInMap [
                                    "S3",
                                    "Lifecycle",
                                    "StorageClass"
                                ]
                                TransitionInDays: 0
                        NoncurrentVersionTransitions:
                            -
                                StorageClass: !FindInMap [
                                    "S3",
                                    "Lifecycle",
                                    "StorageClass"
                                ]
                                TransitionInDays: 0
                    -
                        Id: "Keep previous version for 7 days"
                        Status: Enabled
                        NoncurrentVersionExpirationInDays: 7
                        AbortIncompleteMultipartUpload:
                            DaysAfterInitiation: 1
            Tags:
                -
                    Key: SolutionId
                    Value: !Ref SolutionId
            VersioningConfiguration:
                Status: Enabled

    IngestBucketPolicy:
        Condition: CreateIngestBucket
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref IngestBucket
            PolicyDocument:
                Statement:
                    -
                        Effect: Deny
                        Principal: "*"
                        Action: "*"
                        Resource: !Sub "arn:aws:s3:::${IngestBucket}/*"
                        Condition:
                            Bool:
                                "aws:SecureTransport": false

    #
    # proxy bucket to store proxies and media analysis results
    #
    ProxyBucket:
        Condition: CreateProxyBucket
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        Properties:
            BucketName: !Sub "${BucketPrefix}-proxy"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                    -
                      ServerSideEncryptionByDefault:
                          SSEAlgorithm: AES256
            AccessControl: LogDeliveryWrite
            LoggingConfiguration:
              DestinationBucketName: !Sub "${BucketPrefix}-proxy"
              LogFilePrefix: "access_log/"
            CorsConfiguration:
                CorsRules:
                    -
                        AllowedMethods:
                            - "GET"
                            - "PUT"
                            - "POST"
                            - "HEAD"
                        AllowedOrigins:
                            - "*"
                        AllowedHeaders:
                            - "*"
                        ExposedHeaders:
                            - "ETag"
                            - "Content-Length"
                            - "x-amz-meta-uuid"
                            - "x-amz-meta-md5"
                        MaxAge: 3000
            LifecycleConfiguration:
                Rules:
                    -
                        Id: "Keep access log for 30 days"
                        Status: Enabled
                        Prefix: access_log/
                        ExpirationInDays: 30
                        AbortIncompleteMultipartUpload:
                            DaysAfterInitiation: 1
                    -
                        Id: "Use Intelligent tier"
                        Status: Enabled
                        Transitions:
                            -
                                StorageClass: INTELLIGENT_TIERING
                                TransitionInDays: 0
                        AbortIncompleteMultipartUpload:
                            DaysAfterInitiation: 7
                    -
                        Id: "Keep previous version for 7 days"
                        Status: Enabled
                        NoncurrentVersionExpirationInDays: 7
                        AbortIncompleteMultipartUpload:
                            DaysAfterInitiation: 1
            Tags:
                -
                    Key: SolutionId
                    Value: !Ref SolutionId
            VersioningConfiguration:
                Status: Enabled

    ProxyBucketPolicy:
        Condition: CreateProxyBucket
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref ProxyBucket
            PolicyDocument:
                Statement:
                    -
                        Effect: Deny
                        Principal: "*"
                        Action: "*"
                        Resource: !Sub "arn:aws:s3:::${ProxyBucket}/*"
                        Condition:
                            Bool:
                                "aws:SecureTransport": false

    #
    # Website bucket to host media2cloud web app
    #
    WebBucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        Properties:
            BucketName: !Sub "${BucketPrefix}-web"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                    -
                      ServerSideEncryptionByDefault:
                          SSEAlgorithm: AES256
            AccessControl: LogDeliveryWrite
            LoggingConfiguration:
                DestinationBucketName: !Sub "${BucketPrefix}-web"
                LogFilePrefix: "access_log/"
            WebsiteConfiguration:
                IndexDocument: !FindInMap
                    - "S3"
                    - "Website"
                    - "MainPage"
                ErrorDocument: !FindInMap
                    - "S3"
                    - "Website"
                    - "MainPage"
            LifecycleConfiguration:
                Rules:
                    -
                        Id: "Keep access log for 30 days"
                        Status: Enabled
                        Prefix: access_log/
                        ExpirationInDays: 30
                        AbortIncompleteMultipartUpload:
                            DaysAfterInitiation: 1
                    -
                        Id: "Keep cloudfront logs for 30 days"
                        Status: Enabled
                        Prefix: cf_logs/
                        ExpirationInDays: 30
                        AbortIncompleteMultipartUpload:
                            DaysAfterInitiation: 1
                    -
                        Id: "Use Intelligent tier"
                        Status: Enabled
                        Transitions:
                            -
                                StorageClass: INTELLIGENT_TIERING
                                TransitionInDays: 0
                        AbortIncompleteMultipartUpload:
                            DaysAfterInitiation: 7
                    -
                        Id: "Keep previous version for 7 days"
                        Status: Enabled
                        NoncurrentVersionExpirationInDays: 7
                        AbortIncompleteMultipartUpload:
                            DaysAfterInitiation: 1
            Tags:
                -
                    Key: SolutionId
                    Value: !Ref SolutionId
            VersioningConfiguration:
                Status: Enabled

    WebBucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref WebBucket
            PolicyDocument:
                Statement:
                    -
                        Effect: Deny
                        Principal: "*"
                        Action: "*"
                        Resource: !Sub "arn:aws:s3:::${WebBucket}/*"
                        Condition:
                            Bool:
                                "aws:SecureTransport": false

    #
    # allow lambda function to call apigateway to start ingest state machine
    #
    ExecutionRole:
        Type: AWS::IAM::Role
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W11
                        reason: "This wildcard is present as the lambda function needs to be able to access contents within the bucket!"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Action:
                            - "sts:AssumeRole"
                        Principal:
                            Service:
                                - "lambda.amazonaws.com"
            Path: /
            Policies:
                -
                    PolicyName: !Sub "${SolutionId}-${RootStackName}-s3event-execution"
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                        ## S3
                        -
                            Effect: "Allow"
                            Action:
                                - "s3:GetObject"
                                - "s3:PutObject"
                            Resource: !Sub [
                                "arn:aws:s3:::${x0}/*", {
                                    x0: !If [
                                        CreateIngestBucket,
                                        !FindInMap [
                                            "UserDefined",
                                            "Bucket",
                                            "Ingest"
                                        ],
                                        !Sub "${BucketPrefix}-ingest"
                                    ]
                                }
                            ]

                        ## CloudWatch Logs
                        -
                            Effect: "Allow"
                            Action:
                                - "logs:CreateLogGroup"
                                - "logs:CreateLogStream"
                                - "logs:PutLogEvents"
                            Resource:
                                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"

                        ## API Gateway
                        -
                            Effect: "Allow"
                            Action:
                                - "execute-api:Invoke"
                            # This wildcard is present because there is a circular dependency between
                            # Step Functions resource and API Gateway resource creation
                            Resource:
                                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/*"

                        ## IoT
                        -
                            Effect: "Allow"
                            Action:
                                - "iot:Publish"
                            Resource:
                                - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${IotTopic}"

                        ## Step Function
                        -
                            Effect: "Allow"
                            Action:
                                - "states:DescribeStateMachine"
                                - "states:StartExecution"                            
                            Resource:
                                - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${SolutionId}-${RootStackName}-*"

    #
    # (Bucket event) lambda function on s3 trigger
    #
    OnObjectCreatedFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub "${SolutionId}-${RootStackName}-s3event"
            Description: !Sub "(${SolutionId}) OnObjectCreated starts an ingest workflow"
            Runtime: nodejs10.x
            MemorySize: 128
            Timeout: 300
            Handler: !FindInMap
                - "Function"
                - "Handler"
                - "OnObjectCreated"
            Role: !GetAtt ExecutionRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub [
                    "${KeyPrefix}/${x0}", {
                        x0: !FindInMap [
                            "Solution",
                            "Package",
                            "S3Event"
                        ]
                    }
                ]
            Layers:
                - !Ref AwsSdkLayer
                - !Ref CoreLibLayer
            Environment:
                Variables:
                    ENV_SOLUTION_ID: !Ref SolutionId
                    ENV_STACKNAME: !Ref RootStackName
                    ENV_SOLUTION_UUID: !Ref SolutionUuid
                    ENV_ANONYMOUS_USAGE: !Ref AnonymousUsage
                    ENV_SNS_TOPIC_ARN: !Ref SNSTopicArn
                    ENV_IOT_HOST: !Ref IotHost
                    ENV_IOT_TOPIC: !Ref IotTopic

    FunctionPermission01:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Ref OnObjectCreatedFunction
            Principal: s3.amazonaws.com
            SourceAccount: !Ref AWS::AccountId
            SourceArn: !Sub [
                "arn:aws:s3:::${x0}", {
                    x0: !If [
                        CreateIngestBucket,
                        !FindInMap [
                            "UserDefined",
                            "Bucket",
                            "Ingest"
                        ],
                        !Sub "${BucketPrefix}-ingest"
                    ]
                }
            ]

    #
    # install lambda notification on JSON extension
    #
    #SetNotification01:
    #    # make sure Permission is granted before setting notification
    #    DependsOn: [FunctionPermission01]
    #    Type: Custom::SetNotification01
    #    Properties:
    #        ServiceToken: !Ref CustomResourceArn
    #        FunctionName: SetNotification
    #        Bucket: !Ref Bucket
    #        Id: !Sub "${SolutionId}-lto"
    #        Prefix: !FindInMap ["S3", "Notification", "Prefix"]
    #        Suffixes: !FindInMap ["S3", "Notification", "Suffixes"]
    #        Events: "s3:ObjectCreated:*"
    #        LambdaFunctionArn: !GetAtt OnObjectCreatedFunction.Arn

Outputs:
    IngestBucket:
        Value: !If [
            CreateIngestBucket,
            !Ref IngestBucket,
            !FindInMap [
                "UserDefined",
                "Bucket",
                "Ingest"
            ]
        ]
        Description: Bucket Name (Ingest)

    ProxyBucket:
        Value: !If [
            CreateProxyBucket,
            !Ref ProxyBucket,
            !FindInMap [
                "UserDefined",
                "Bucket",
                "Proxy"
            ]
        ]
        Description: Bucket Name (Proxy)

    WebBucket:
        Value: !Ref WebBucket
        Description: Bucket Name (Web)

    ExecutionRoleArn:
        Value: !GetAtt ExecutionRole.Arn
        Description: Role Arn (S3 Event Execution)

    OnObjectCreatedArn:
        Value: !GetAtt OnObjectCreatedFunction.Arn
        Description: Lambda Arn (OnObjectCreated)

    LambdaFunctionList:
        Value: !Join [ ",", [
            !Ref OnObjectCreatedFunction
        ]]
        Description: List of Lambda functions (S3 Notification)
