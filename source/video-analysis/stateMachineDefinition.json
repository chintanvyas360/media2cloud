{
    "StartAt": "Sanity check",
    "States": {
        "Sanity check": {
            "Type": "Pass",
            "Next": "Start video analysis"
        },
        "Start video analysis": {
            "Type": "Parallel",
            "Branches": [
                {
                    "StartAt": "Celeb params",
                    "States": {
                        "Celeb params": {
                            "Type": "Pass",
                            "Result": "start-celeb",
                            "ResultPath": "$.operation",
                            "Next": "Celeb enabled?"
                        },
                        "Celeb enabled?": {
                            "Type": "Choice",
                            "Choices": [
                                {
                                    "Variable": "$.input.aiOptions.celeb",
                                    "BooleanEquals": false,
                                    "Next": "Celeb skipped"
                                }
                            ],
                            "Default": "Start celeb"
                        },
                        "Celeb skipped": {
                            "Type": "Succeed"
                        },
                        "Start celeb": {
                            "Type": "Task",
                            "Resource": "${x0}",
                            "Next": "Wait for celeb",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "IntervalSeconds": 1,
                                    "MaxAttempts": 2,
                                    "BackoffRate": 1.2
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "Next": "Celeb error"
                                }
                            ]
                        },
                        "Wait for celeb": {
                            "Type": "Wait",
                            "Seconds": 24,
                            "Next": "Check celeb status"
                        },
                        "Check celeb status": {
                            "Type": "Task",
                            "Resource": "${x0}",
                            "Parameters": {
                                "uuid.$": "$.uuid",
                                "status.$": "$.status",
                                "progress.$": "$.progress",
                                "operation": "check-celeb-status",
                                "input.$": "$.next"
                            },
                            "Next": "Celeb completed?",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "IntervalSeconds": 1,
                                    "MaxAttempts": 6,
                                    "BackoffRate": 1.1
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "Next": "Celeb error"
                                }
                            ]
                        },
                        "Celeb completed?": {
                            "Type": "Choice",
                            "Choices": [
                                {
                                    "Variable": "$.status",
                                    "StringEquals": "COMPLETED",
                                    "Next": "Collect celeb results"
                                }
                            ],
                            "Default": "Wait for celeb"
                        },
                        "Collect celeb results": {
                            "Type": "Task",
                            "Resource": "${x1}",
                            "Parameters": {
                                "uuid.$": "$.uuid",
                                "status.$": "$.status",
                                "progress.$": "$.progress",
                                "operation": "collect-celeb-results",
                                "input.$": "$.next"
                            },
                            "Next": "Create celeb track",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "IntervalSeconds": 1,
                                    "MaxAttempts": 6,
                                    "BackoffRate": 1.1
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "Next": "Celeb error"
                                }
                            ]
                        },
                        "Create celeb track": {
                            "Type": "Task",
                            "Resource": "${x1}",
                            "Parameters": {
                                "uuid.$": "$.uuid",
                                "status.$": "$.status",
                                "progress.$": "$.progress",
                                "operation": "create-celeb-track",
                                "input.$": "$.next"
                            },
                            "Next": "More celeb track?",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "IntervalSeconds": 1,
                                    "MaxAttempts": 6,
                                    "BackoffRate": 1.1
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "Next": "Celeb error"
                                }
                            ]
                        },
                        "More celeb track?": {
                            "Type": "Choice",
                            "Choices": [
                                {
                                    "Variable": "$.status",
                                    "StringEquals": "COMPLETED",
                                    "Next": "Celeb succeed"
                                }
                            ],
                            "Default": "Create celeb track"
                        },
                        "Celeb error": {
                            "Type": "Fail"
                        },
                        "Celeb succeed": {
                            "Type": "Succeed"
                        }
                    }
                },
                {
                    "StartAt": "Face params",
                    "States": {
                        "Face params": {
                            "Type": "Pass",
                            "Result": "start-face",
                            "ResultPath": "$.operation",
                            "Next": "Face enabled?"
                        },
                        "Face enabled?": {
                            "Type": "Choice",
                            "Choices": [
                                {
                                    "Variable": "$.input.aiOptions.face",
                                    "BooleanEquals": false,
                                    "Next": "Face skipped"
                                }
                            ],
                            "Default": "Start face"
                        },
                        "Face skipped": {
                            "Type": "Succeed"
                        },
                        "Start face": {
                            "Type": "Task",
                            "Resource": "${x0}",
                            "Next": "Wait for face",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "IntervalSeconds": 1,
                                    "MaxAttempts": 2,
                                    "BackoffRate": 1.2
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "Next": "Face error"
                                }
                            ]
                        },
                        "Wait for face": {
                            "Type": "Wait",
                            "Seconds": 24,
                            "Next": "Check face status"
                        },
                        "Check face status": {
                            "Type": "Task",
                            "Resource": "${x0}",
                            "Parameters": {
                                "uuid.$": "$.uuid",
                                "status.$": "$.status",
                                "progress.$": "$.progress",
                                "operation": "check-face-status",
                                "input.$": "$.next"
                            },
                            "Next": "Face completed?",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "IntervalSeconds": 1,
                                    "MaxAttempts": 6,
                                    "BackoffRate": 1.1
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "Next": "Face error"
                                }
                            ]
                        },
                        "Face completed?": {
                            "Type": "Choice",
                            "Choices": [
                                {
                                    "Variable": "$.status",
                                    "StringEquals": "COMPLETED",
                                    "Next": "Collect face results"
                                }
                            ],
                            "Default": "Wait for face"
                        },
                        "Collect face results": {
                            "Type": "Task",
                            "Resource": "${x1}",
                            "Parameters": {
                                "uuid.$": "$.uuid",
                                "status.$": "$.status",
                                "progress.$": "$.progress",
                                "operation": "collect-face-results",
                                "input.$": "$.next"
                            },
                            "Next": "Face succeed",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "IntervalSeconds": 1,
                                    "MaxAttempts": 6,
                                    "BackoffRate": 1.1
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "Next": "Face error"
                                }
                            ]
                        },
                        "Face error": {
                            "Type": "Fail"
                        },
                        "Face succeed": {
                            "Type": "Succeed"
                        }
                    }
                },
                {
                    "StartAt": "Face-Match params",
                    "States": {
                        "Face-Match params": {
                            "Type": "Pass",
                            "Result": "start-face-match",
                            "ResultPath": "$.operation",
                            "Next": "Face-Match enabled?"
                        },
                        "Face-Match enabled?": {
                            "Type": "Choice",
                            "Choices": [
                                {
                                    "Variable": "$.input.aiOptions.faceMatch",
                                    "BooleanEquals": false,
                                    "Next": "Face-Match skipped"
                                }
                            ],
                            "Default": "Start face-match"
                        },
                        "Face-Match skipped": {
                            "Type": "Succeed"
                        },
                        "Start face-match": {
                            "Type": "Task",
                            "Resource": "${x0}",
                            "Next": "Wait for face-match",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "IntervalSeconds": 1,
                                    "MaxAttempts": 2,
                                    "BackoffRate": 1.2
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "Next": "Face-Match error"
                                }
                            ]
                        },
                        "Wait for face-match": {
                            "Type": "Wait",
                            "Seconds": 24,
                            "Next": "Check face-match status"
                        },
                        "Check face-match status": {
                            "Type": "Task",
                            "Resource": "${x0}",
                            "Parameters": {
                                "uuid.$": "$.uuid",
                                "status.$": "$.status",
                                "progress.$": "$.progress",
                                "operation": "check-face-match-status",
                                "input.$": "$.next"
                            },
                            "Next": "Face-Match completed?",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "IntervalSeconds": 1,
                                    "MaxAttempts": 6,
                                    "BackoffRate": 1.1
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "Next": "Face-Match error"
                                }
                            ]
                        },
                        "Face-Match completed?": {
                            "Type": "Choice",
                            "Choices": [
                                {
                                    "Variable": "$.status",
                                    "StringEquals": "COMPLETED",
                                    "Next": "Collect face-match results"
                                }
                            ],
                            "Default": "Wait for face-match"
                        },
                        "Collect face-match results": {
                            "Type": "Task",
                            "Resource": "${x1}",
                            "Parameters": {
                                "uuid.$": "$.uuid",
                                "status.$": "$.status",
                                "progress.$": "$.progress",
                                "operation": "collect-face-match-results",
                                "input.$": "$.next"
                            },
                            "Next": "Create face-match track",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "IntervalSeconds": 1,
                                    "MaxAttempts": 6,
                                    "BackoffRate": 1.1
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "Next": "Face-Match error"
                                }
                            ]
                        },
                        "Create face-match track": {
                            "Type": "Task",
                            "Resource": "${x1}",
                            "Parameters": {
                                "uuid.$": "$.uuid",
                                "status.$": "$.status",
                                "progress.$": "$.progress",
                                "operation": "create-face-match-track",
                                "input.$": "$.next"
                            },
                            "Next": "More face-match track?",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "IntervalSeconds": 1,
                                    "MaxAttempts": 6,
                                    "BackoffRate": 1.1
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "Next": "Face-Match error"
                                }
                            ]
                        },
                        "More face-match track?": {
                            "Type": "Choice",
                            "Choices": [
                                {
                                    "Variable": "$.status",
                                    "StringEquals": "COMPLETED",
                                    "Next": "Face-Match succeed"
                                }
                            ],
                            "Default": "Create face-match track"
                        },
                        "Face-Match error": {
                            "Type": "Fail"
                        },
                        "Face-Match succeed": {
                            "Type": "Succeed"
                        }
                    }
                },
                {
                    "StartAt": "Label params",
                    "States": {
                        "Label params": {
                            "Type": "Pass",
                            "Result": "start-label",
                            "ResultPath": "$.operation",
                            "Next": "Label enabled?"
                        },
                        "Label enabled?": {
                            "Type": "Choice",
                            "Choices": [
                                {
                                    "Variable": "$.input.aiOptions.label",
                                    "BooleanEquals": false,
                                    "Next": "Label skipped"
                                }
                            ],
                            "Default": "Start label"
                        },
                        "Label skipped": {
                            "Type": "Succeed"
                        },
                        "Start label": {
                            "Type": "Task",
                            "Resource": "${x0}",
                            "Next": "Wait for label",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "IntervalSeconds": 1,
                                    "MaxAttempts": 2,
                                    "BackoffRate": 1.2
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "Next": "Label error"
                                }
                            ]
                        },
                        "Wait for label": {
                            "Type": "Wait",
                            "Seconds": 24,
                            "Next": "Check label status"
                        },
                        "Check label status": {
                            "Type": "Task",
                            "Resource": "${x0}",
                            "Parameters": {
                                "uuid.$": "$.uuid",
                                "status.$": "$.status",
                                "progress.$": "$.progress",
                                "operation": "check-label-status",
                                "input.$": "$.next"
                            },
                            "Next": "Label completed?",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "IntervalSeconds": 1,
                                    "MaxAttempts": 6,
                                    "BackoffRate": 1.1
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "Next": "Label error"
                                }
                            ]
                        },
                        "Label completed?": {
                            "Type": "Choice",
                            "Choices": [
                                {
                                    "Variable": "$.status",
                                    "StringEquals": "COMPLETED",
                                    "Next": "Collect label results"
                                }
                            ],
                            "Default": "Wait for label"
                        },
                        "Collect label results": {
                            "Type": "Task",
                            "Resource": "${x1}",
                            "Parameters": {
                                "uuid.$": "$.uuid",
                                "status.$": "$.status",
                                "progress.$": "$.progress",
                                "operation": "collect-label-results",
                                "input.$": "$.next"
                            },
                            "Next": "Create label track",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "IntervalSeconds": 1,
                                    "MaxAttempts": 6,
                                    "BackoffRate": 1.1
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "Next": "Label error"
                                }
                            ]
                        },
                        "Create label track": {
                            "Type": "Task",
                            "Resource": "${x1}",
                            "Parameters": {
                                "uuid.$": "$.uuid",
                                "status.$": "$.status",
                                "progress.$": "$.progress",
                                "operation": "create-label-track",
                                "input.$": "$.next"
                            },
                            "Next": "More label track?",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "IntervalSeconds": 1,
                                    "MaxAttempts": 6,
                                    "BackoffRate": 1.1
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "Next": "Label error"
                                }
                            ]
                        },
                        "More label track?": {
                            "Type": "Choice",
                            "Choices": [
                                {
                                    "Variable": "$.status",
                                    "StringEquals": "COMPLETED",
                                    "Next": "Label succeed"
                                }
                            ],
                            "Default": "Create label track"
                        },

                        "Label error": {
                            "Type": "Fail"
                        },
                        "Label succeed": {
                            "Type": "Succeed"
                        }
                    }
                },
                {
                    "StartAt": "Moderation params",
                    "States": {
                        "Moderation params": {
                            "Type": "Pass",
                            "Result": "start-moderation",
                            "ResultPath": "$.operation",
                            "Next": "Moderation enabled?"
                        },
                        "Moderation enabled?": {
                            "Type": "Choice",
                            "Choices": [
                                {
                                    "Variable": "$.input.aiOptions.moderation",
                                    "BooleanEquals": false,
                                    "Next": "Moderation skipped"
                                }
                            ],
                            "Default": "Start moderation"
                        },
                        "Moderation skipped": {
                            "Type": "Succeed"
                        },
                        "Start moderation": {
                            "Type": "Task",
                            "Resource": "${x0}",
                            "Next": "Wait for moderation",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "IntervalSeconds": 1,
                                    "MaxAttempts": 2,
                                    "BackoffRate": 1.2
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "Next": "Moderation error"
                                }
                            ]
                        },
                        "Wait for moderation": {
                            "Type": "Wait",
                            "Seconds": 24,
                            "Next": "Check moderation status"
                        },
                        "Check moderation status": {
                            "Type": "Task",
                            "Resource": "${x0}",
                            "Parameters": {
                                "uuid.$": "$.uuid",
                                "status.$": "$.status",
                                "progress.$": "$.progress",
                                "operation": "check-moderation-status",
                                "input.$": "$.next"
                            },
                            "Next": "Moderation completed?",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "IntervalSeconds": 1,
                                    "MaxAttempts": 6,
                                    "BackoffRate": 1.1
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "Next": "Moderation error"
                                }
                            ]
                        },
                        "Moderation completed?": {
                            "Type": "Choice",
                            "Choices": [
                                {
                                    "Variable": "$.status",
                                    "StringEquals": "COMPLETED",
                                    "Next": "Collect moderation results"
                                }
                            ],
                            "Default": "Wait for moderation"
                        },
                        "Collect moderation results": {
                            "Type": "Task",
                            "Resource": "${x1}",
                            "Parameters": {
                                "uuid.$": "$.uuid",
                                "status.$": "$.status",
                                "progress.$": "$.progress",
                                "operation": "collect-moderation-results",
                                "input.$": "$.next"
                            },
                            "Next": "Create moderation track",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "IntervalSeconds": 1,
                                    "MaxAttempts": 6,
                                    "BackoffRate": 1.1
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "Next": "Moderation error"
                                }
                            ]
                        },
                        "Create moderation track": {
                            "Type": "Task",
                            "Resource": "${x1}",
                            "Parameters": {
                                "uuid.$": "$.uuid",
                                "status.$": "$.status",
                                "progress.$": "$.progress",
                                "operation": "create-moderation-track",
                                "input.$": "$.next"
                            },
                            "Next": "More moderation track?",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "IntervalSeconds": 1,
                                    "MaxAttempts": 6,
                                    "BackoffRate": 1.1
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "Next": "Moderation error"
                                }
                            ]
                        },
                        "More moderation track?": {
                            "Type": "Choice",
                            "Choices": [
                                {
                                    "Variable": "$.status",
                                    "StringEquals": "COMPLETED",
                                    "Next": "Moderation succeed"
                                }
                            ],
                            "Default": "Create moderation track"
                        },
                        "Moderation error": {
                            "Type": "Fail"
                        },
                        "Moderation succeed": {
                            "Type": "Succeed"
                        }
                    }
                },
                {
                    "StartAt": "Person params",
                    "States": {
                        "Person params": {
                            "Type": "Pass",
                            "Result": "start-person",
                            "ResultPath": "$.operation",
                            "Next": "Person enabled?"
                        },
                        "Person enabled?": {
                            "Type": "Choice",
                            "Choices": [
                                {
                                    "Variable": "$.input.aiOptions.person",
                                    "BooleanEquals": false,
                                    "Next": "Person skipped"
                                }
                            ],
                            "Default": "Start person"
                        },
                        "Person skipped": {
                            "Type": "Succeed"
                        },
                        "Start person": {
                            "Type": "Task",
                            "Resource": "${x0}",
                            "Next": "Wait for person",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "IntervalSeconds": 1,
                                    "MaxAttempts": 2,
                                    "BackoffRate": 1.2
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "Next": "Person error"
                                }
                            ]
                        },
                        "Wait for person": {
                            "Type": "Wait",
                            "Seconds": 24,
                            "Next": "Check person status"
                        },
                        "Check person status": {
                            "Type": "Task",
                            "Resource": "${x0}",
                            "Parameters": {
                                "uuid.$": "$.uuid",
                                "status.$": "$.status",
                                "progress.$": "$.progress",
                                "operation": "check-person-status",
                                "input.$": "$.next"
                            },
                            "Next": "Person completed?",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "IntervalSeconds": 1,
                                    "MaxAttempts": 6,
                                    "BackoffRate": 1.1
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "Next": "Person error"
                                }
                            ]
                        },
                        "Person completed?": {
                            "Type": "Choice",
                            "Choices": [
                                {
                                    "Variable": "$.status",
                                    "StringEquals": "COMPLETED",
                                    "Next": "Collect person results"
                                }
                            ],
                            "Default": "Wait for person"
                        },
                        "Collect person results": {
                            "Type": "Task",
                            "Resource": "${x1}",
                            "Parameters": {
                                "uuid.$": "$.uuid",
                                "status.$": "$.status",
                                "progress.$": "$.progress",
                                "operation": "collect-person-results",
                                "input.$": "$.next"
                            },
                            "Next": "Create person track",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "IntervalSeconds": 1,
                                    "MaxAttempts": 6,
                                    "BackoffRate": 1.1
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "Next": "Person error"
                                }
                            ]
                        },
                        "Create person track": {
                            "Type": "Task",
                            "Resource": "${x1}",
                            "Parameters": {
                                "uuid.$": "$.uuid",
                                "status.$": "$.status",
                                "progress.$": "$.progress",
                                "operation": "create-person-track",
                                "input.$": "$.next"
                            },
                            "Next": "More person track?",
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "IntervalSeconds": 1,
                                    "MaxAttempts": 6,
                                    "BackoffRate": 1.1
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [
                                        "States.ALL"
                                    ],
                                    "Next": "Person error"
                                }
                            ]
                        },
                        "More person track?": {
                            "Type": "Choice",
                            "Choices": [
                                {
                                    "Variable": "$.status",
                                    "StringEquals": "COMPLETED",
                                    "Next": "Person succeed"
                                }
                            ],
                            "Default": "Create person track"
                        },
                        "Person error": {
                            "Type": "Fail"
                        },
                        "Person succeed": {
                            "Type": "Succeed"
                        }
                    }
                }
            ],
            "Next": "Completed"
        },
        "Completed": {
            "Type": "Succeed"
        }
    }
}
